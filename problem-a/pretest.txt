calvinchan@Calvins-MacBook-Pro problem-set-01-Calvinchh % jest problem-a 
 FAIL  problem-a/problem.spec.js
  Used test-driven development
    ✕ Used Jest to pre-test code, saved in `pretest.txt` (3 ms)
  Source code is valid
    ✓ HTML validates without errors (2 ms)
    ✕ CSS validates without errors (76 ms)
  Has required HTML
    ✕ Specifies charset (1 ms)
    ✕ Includes page title (1 ms)
    ✕ Includes author metadata (1 ms)
    ✕ Has a top-level heading
    ✕ Has an image
    ✕ Includes a paragraph (1 ms)
    ✕ Includes a hyperlink in the paragraph
    ✕ Includes a list
    ✕ List has at least 3 items
  Has required CSS
    ✕ Links in local stylesheet (1 ms)
    ✕ Body has default font size
    ✕ Body has default font family
    ✕ Paragraphs have specified line height (1 ms)
    ✕ Images have constrained height
    ✕ Important list item is colored

  ● Used test-driven development › Used Jest to pre-test code, saved in `pretest.txt`

    expect(received).toMatch(expected)

    Expected pattern: /FAIL +problem-a\/problem\.spec\.js/
    Received string:  "{\\rtf1\\ansi\\ansicpg1252\\cocoartf2577
    \\cocoatextscaling0\\cocoaplatform0{\\fonttbl\\f0\\fnil\\fcharset0 Menlo-Regular;\\f1\\fnil\\fcharset0 Menlo-Bold;}
    {\\colortbl;\\red255\\green255\\blue255;\\red0\\green0\\blue0;\\red255\\green255\\blue255;\\red133\\green0\\blue2;
    \\red116\\green116\\blue116;\\red202\\green51\\blue35;\\red57\\green192\\blue38;\\red125\\green125\\blue125;\\red170\\green171\\blue37;
    \\red56\\green185\\blue199;\\red64\\green64\\blue64;\\red36\\green88\\blue93;\\red82\\green82\\blue28;\\red37\\green90\\blue29;
    \\red219\\green39\\blue218;\\red101\\green29\\blue101;}
    {\\*\\expandedcolortbl;;\\csgray\\c0;\\csgray\\c100000;\\cspthree\\c54879\\c10345\\c6517;
    \\csgenericrgb\\c45371\\c45369\\c45370;\\cssrgb\\c83898\\c28665\\c18024;\\cssrgb\\c25704\\c77963\\c19556;\\cssrgb\\c56351\\c56353\\c56351;\\cssrgb\\c72330\\c71683\\c18597;
    \\cssrgb\\c25544\\c77008\\c82022;\\csgenericrgb\\c24998\\c24998\\c24997;\\csgenericrgb\\c14170\\c34397\\c36520;\\csgenericrgb\\c32056\\c32200\\c11110;\\csgenericrgb\\c14346\\c35448\\c11343;
    \\cssrgb\\c89513\\c29738\\c88483;\\csgenericrgb\\c39678\\c11517\\c39631;}
    \\margl1440\\margr1440\\vieww11520\\viewh8400\\viewkind0
    \\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\pardirnatural\\partightenfactor0·
    \\f0\\fs22 \\cf2 \\CocoaLigature0 calvinchan@Calvins-MacBook-Pro ~ % cd problem-set-01-Calvinchh \\
    calvinchan@Calvins-MacBook-Pro problem-set-01-Calvinchh % jest problem-a \\·
    \\f1\\b \\cf3 \\cb4  FAIL·
    \\f0\\b0 \\cf2 \\cb1  \\cf5 problem-a/
    \\f1\\b \\cf2 problem.spec.js
    \\f0\\b0 \\
      Used test-driven development\\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Used Jest to pre-test code, saved in `pretest.txt` (1 ms)\\cf2 \\
      Source code is valid\\
        \\cf7 \\uc0\\u10003 \\cf2  \\cf5 HTML validates without errors (2 ms)\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 CSS validates without errors (81 ms)\\cf2 \\
      Has required HTML\\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Specifies charset (2 ms)\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Includes page title\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Includes author metadata (1 ms)\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Has a top-level heading\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Has an image\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Includes a paragraph\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Includes a hyperlink in the paragraph (1 ms)\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Includes a list\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 List has at least 3 items\\cf2 \\
      Has required CSS\\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Links in local stylesheet\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Body has default font size\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Body has default font family (1 ms)\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Paragraphs have specified line height\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Images have constrained height\\cf2 \\
        \\cf6 \\uc0\\u10005 \\cf2  \\cf5 Important list item is colored\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Used test-driven development \\'9b Used Jest to pre-test code, saved in `pretest.txt`
    \\f0\\b0 \\cf2 \\
    \\
        ENOENT: no such file or directory, open '/Users/calvinchan/problem-set-01-Calvinchh/problem-a/pretest.txt'\\
    \\
    \\cf5     \\cf2  \\cf8  16 |\\cf2    test(\\cf7 'Used Jest to pre-test code, saved in `pretest.txt`'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  17 |\\cf2      \\cf10 const\\cf2  path \\cf9 =\\cf2  __dirname \\cf9 +\\cf2  \\cf7 '/pretest.txt'\\cf2 \\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  18 |\\cf5      \\cf12 const\\cf5  pretest \\cf13 =\\cf5  fs\\cf13 .\\cf5 readFileSync(path\\cf13 ,\\cf5  \\cf14 'utf-8'\\cf5 )\\cf13 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8     |\\cf2·························
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  19 |\\cf2      expect(pretest)\\cf9 .\\cf2 toMatch(\\cf15 /FAIL +problem-a\\\\/problem\\\\.spec\\\\.js/\\cf2 )\\
    \\cf5     \\cf2  \\cf8  20 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  21 |\\cf2  \\})\\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :18:24)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Source code is valid \\'9b CSS validates without errors
    \\f0\\b0 \\cf2 \\
    \\
        error: Unexpected empty source (no-empty-source)\\
               At line 1, column 1.\\
    \\
    \\cf5     \\cf2  \\cf8  41 |\\cf2 \\
    \\cf5     \\cf2  \\cf8  42 |\\cf2    test(\\cf7 'CSS validates without errors'\\cf9 ,\\cf2  \\cf10 async\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  43 |\\cf5      \\cf12 await\\cf5  expect(\\cf14 'problem-a/css/*.css'\\cf5 )\\cf13 .\\cf5 toHaveNoCssLintErrorsAsync()\\cf13 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8     |\\cf2··········································
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  44 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  45 |\\cf2  \\})\\cf9 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8  46 |\\cf2 \\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :43:41)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required HTML \\'9b Specifies charset
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toBe\\cf5 (\\cf7 expected\\cf5 ) // Object.is equality\\cf2 \\
    \\
        Expected: \\cf7 1\\cf2 \\
        Received: \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  53 |\\cf2 \\
    \\cf5     \\cf2  \\cf8  54 |\\cf2    test(\\cf7 'Specifies charset'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  55 |\\cf5      expect($(\\cf14 'head > meta[charset]'\\cf5 )\\cf13 .\\cf5 length)\\cf13 .\\cf5 toBe(\\cf16 1\\cf5 )\\cf13 ;\\cf5  \\cf11 //has 1 tag\\cf2 \\
    \\cf5     \\cf2  \\cf8     |\\cf2···············································
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  56 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  57 |\\cf2    \\
    \\cf5     \\cf2  \\cf8  58 |\\cf2    test(\\cf7 'Includes page title'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :55:46)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required HTML \\'9b Includes page title
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toEqual\\cf5 (\\cf7 expected\\cf5 ) // deep equality\\cf2 \\
    \\
        Expected: \\cf7 1\\cf2 \\
        Received: \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  58 |\\cf2    test(\\cf7 'Includes page title'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  59 |\\cf2      \\cf10 let\\cf2  title \\cf9 =\\cf2  $(\\cf7 'head > title'\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  60 |\\cf5      expect(title\\cf13 .\\cf5 length)\\cf13 .\\cf5 toEqual(\\cf16 1\\cf5 )\\cf13 ;\\cf5  \\cf11 //has 1 tag\\cf2 \\
    \\cf5     \\cf2  \\cf8     |\\cf2···························
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  61 |\\cf2      expect(title\\cf9 .\\cf2 text()\\cf9 .\\cf2 length)\\cf9 .\\cf2 toBeGreaterThan(\\cf15 0\\cf2 )\\cf9 ;\\cf2  \\cf8 //has content\\cf2 \\
    \\cf5     \\cf2  \\cf8  62 |\\cf2      expect(title\\cf9 .\\cf2 text())\\cf9 .\\cf2 not\\cf9 .\\cf2 toEqual(\\cf7 \"My Page Title\"\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8  63 |\\cf2    \\})\\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :60:26)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required HTML \\'9b Includes author metadata
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toEqual\\cf5 (\\cf7 expected\\cf5 ) // deep equality\\cf2 \\
    \\
        Expected: \\cf7 1\\cf2 \\
        Received: \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  65 |\\cf2    test(\\cf7 'Includes author metadata'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  66 |\\cf2      \\cf10 let\\cf2  author \\cf9 =\\cf2  $(\\cf7 'head > meta[name=\"author\"]'\\cf2 )\\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  67 |\\cf5      expect(author\\cf13 .\\cf5 length)\\cf13 .\\cf5 toEqual(\\cf16 1\\cf5 )\\cf13 ;\\cf5  \\cf11 //has 1 tag\\cf2 \\
    \\cf5     \\cf2  \\cf8     |\\cf2····························
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  68 |\\cf2      expect(author\\cf9 .\\cf2 attr(\\cf7 'content'\\cf2 )\\cf9 .\\cf2 length)\\cf9 .\\cf2 toBeGreaterThan(\\cf15 0\\cf2 )\\cf9 ;\\cf2  \\cf8 //has content\\cf2 \\
    \\cf5     \\cf2  \\cf8  69 |\\cf2      expect(author\\cf9 .\\cf2 attr(\\cf7 'content'\\cf2 ))\\cf9 .\\cf2 not\\cf9 .\\cf2 toEqual(\\cf7 \"your name\"\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8  70 |\\cf2    \\})\\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :67:27)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required HTML \\'9b Has a top-level heading
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toEqual\\cf5 (\\cf7 expected\\cf5 ) // deep equality\\cf2 \\
    \\
        Expected: \\cf7 1\\cf2 \\
        Received: \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  72 |\\cf2    test(\\cf7 'Has a top-level heading'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  73 |\\cf2      \\cf10 let\\cf2  h1 \\cf9 =\\cf2  $(\\cf7 'h1'\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  74 |\\cf5      expect(h1\\cf13 .\\cf5 length)\\cf13 .\\cf5 toEqual(\\cf16 1\\cf5 )\\cf13 ;\\cf5  \\cf11 //has 1 tag\\cf2 \\
    \\cf5     \\cf2  \\cf8     |\\cf2························
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  75 |\\cf2      expect(h1\\cf9 .\\cf2 text())\\cf9 .\\cf2 toBeTruthy()\\cf9 ;\\cf2  \\cf8 //contains text\\cf2 \\
    \\cf5     \\cf2  \\cf8  76 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  77 |\\cf2 \\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :74:23)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required HTML \\'9b Has an image
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toBeGreaterThanOrEqual\\cf5 (\\cf7 expected\\cf5 )\\cf2 \\
    \\
        Expected: >= \\cf7 1\\cf2 \\
        Received:    \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  78 |\\cf2    test(\\cf7 'Has an image'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  79 |\\cf2      \\cf10 let\\cf2  img \\cf9 =\\cf2  $(\\cf7 'img'\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  80 |\\cf5      expect(img\\cf13 .\\cf5 length)\\cf13 .\\cf5 toBeGreaterThanOrEqual(\\cf16 1\\cf5 )\\cf13 ;\\cf5  \\cf11 //has 1+ tags\\cf2 \\
    \\cf5     \\cf2  \\cf8     |\\cf2·························
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  81 |\\cf2      expect(img\\cf9 .\\cf2 attr(\\cf7 'src'\\cf2 ))\\cf9 .\\cf2 toMatch(\\cf15 /img\\\\/.+/\\cf2 )\\cf9 ;\\cf2  \\cf8 //image in folder\\cf2 \\
    \\cf5     \\cf2  \\cf8  82 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  83 |\\cf2 \\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :80:24)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required HTML \\'9b Includes a paragraph
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toBeGreaterThanOrEqual\\cf5 (\\cf7 expected\\cf5 )\\cf2 \\
    \\
        Expected: >= \\cf7 1\\cf2 \\
        Received:    \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  84 |\\cf2    test(\\cf7 'Includes a paragraph'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  85 |\\cf2      \\cf10 let\\cf2  p \\cf9 =\\cf2  $(\\cf7 'p'\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  86 |\\cf5      expect(p\\cf13 .\\cf5 length)\\cf13 .\\cf5 toBeGreaterThanOrEqual(\\cf16 1\\cf5 )\\cf13 ;\\cf5  \\cf11 //has 1+ tags\\cf2 \\
    \\cf5     \\cf2  \\cf8     |\\cf2·······················
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  87 |\\cf2      expect(p\\cf9 .\\cf2 text())\\cf9 .\\cf2 toBeTruthy()\\cf9 ;\\cf2  \\cf8 //contains text\\cf2 \\
    \\cf5     \\cf2  \\cf8  88 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  89 |\\cf2 \\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :86:22)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required HTML \\'9b Includes a hyperlink in the paragraph
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toBeGreaterThanOrEqual\\cf5 (\\cf7 expected\\cf5 )\\cf2 \\
    \\
        Expected: >= \\cf7 1\\cf2 \\
        Received:    \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  90 |\\cf2    test(\\cf7 'Includes a hyperlink in the paragraph'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  91 |\\cf2      \\cf10 let\\cf2  a \\cf9 =\\cf2  $(\\cf7 'p a'\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  92 |\\cf5      expect(a\\cf13 .\\cf5 length)\\cf13 .\\cf5 toBeGreaterThanOrEqual(\\cf16 1\\cf5 )\\cf13 ;\\cf5  \\cf11 //has 1+ tags\\cf2 \\
    \\cf5     \\cf2  \\cf8     |\\cf2·······················
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  93 |\\cf2      expect(a\\cf9 .\\cf2 attr(\\cf7 'href'\\cf2 ))\\cf9 .\\cf2 toMatch(\\cf15 /https?:\\\\/\\\\/*/\\cf2 )\\cf9 ;\\cf2  \\cf8 //links to external page\\cf2 \\
    \\cf5     \\cf2  \\cf8  94 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  95 |\\cf2 \\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :92:22)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required HTML \\'9b Includes a list
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toBeGreaterThanOrEqual\\cf5 (\\cf7 expected\\cf5 )\\cf2 \\
    \\
        Expected: >= \\cf7 1\\cf2 \\
        Received:    \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8   95 |\\cf2 \\
    \\cf5     \\cf2  \\cf8   96 |\\cf2    test(\\cf7 'Includes a list'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11   97 |\\cf5      expect( $(\\cf14 'ul, ol'\\cf5 )\\cf13 .\\cf5 length )\\cf13 .\\cf5 toBeGreaterThanOrEqual(\\cf16 1\\cf5 )\\cf13 ;\\cf5  \\cf11 //has 1+ tag\\cf2 \\
    \\cf5     \\cf2  \\cf8      |\\cf2···································
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8   98 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8   99 |\\cf2 \\
    \\cf5     \\cf2  \\cf8  100 |\\cf2    test(\\cf7 'List has at least 3 items'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :97:34)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required HTML \\'9b List has at least 3 items
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toBeGreaterThanOrEqual\\cf5 (\\cf7 expected\\cf5 )\\cf2 \\
    \\
        Expected: >= \\cf7 3\\cf2 \\
        Received:    \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  100 |\\cf2    test(\\cf7 'List has at least 3 items'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  101 |\\cf2      \\cf10 let\\cf2  li \\cf9 =\\cf2  $(\\cf7 'ul, ol'\\cf2 )\\cf9 .\\cf2 first()\\cf9 .\\cf2 children(\\cf7 'li'\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  102 |\\cf5      expect( li\\cf13 .\\cf5 length )\\cf13 .\\cf5 toBeGreaterThanOrEqual(\\cf16 3\\cf5 )\\cf13 ;\\cf5  \\cf11 //has 3 tags\\cf2 \\
    \\cf5     \\cf2  \\cf8      |\\cf2··························
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  103 |\\cf2 \\
    \\cf5     \\cf2  \\cf8  104 |\\cf2      \\cf8 //no empty items!\\cf2 \\
    \\cf5     \\cf2  \\cf8  105 |\\cf2      \\cf10 let\\cf2  empty \\cf9 =\\cf2  li\\cf9 .\\cf2 filter(\\cf10 function\\cf2 (i\\cf9 ,\\cf2 elem) \\{ \\cf10 return\\cf2  $(\\cf10 this\\cf2 )\\cf9 .\\cf2 text()\\cf9 .\\cf2 length \\cf9 ==\\cf2  \\cf15 0\\cf9 ;\\cf2  \\})\\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :102:25)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required CSS \\'9b Links in local stylesheet
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toEqual\\cf5 (\\cf7 expected\\cf5 ) // deep equality\\cf2 \\
    \\
        Expected: \\cf7 1\\cf2 \\
        Received: \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  119 |\\cf2    test(\\cf7 'Links in local stylesheet'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  120 |\\cf2      \\cf10 let\\cf2  link \\cf9 =\\cf2  $(\\cf7 'head > link'\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  121 |\\cf5      expect( link\\cf13 .\\cf5 length )\\cf13 .\\cf5 toEqual(\\cf16 1\\cf5 )\\cf13 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8      |\\cf2····························
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  122 |\\cf2      expect( link\\cf9 .\\cf2 attr(\\cf7 'href'\\cf2 ))\\cf9 .\\cf2 toMatch(\\cf7 'css/style.css'\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8  123 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  124 |\\cf2 \\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :121:27)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required CSS \\'9b Body has default font size
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toEqual\\cf5 (\\cf7 expected\\cf5 ) // deep equality\\cf2 \\
    \\
        Expected: \\cf7 \"16px\"\\cf2 \\
        Received: \\cf6 undefined\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  124 |\\cf2 \\
    \\cf5     \\cf2  \\cf8  125 |\\cf2    test(\\cf7 'Body has default font size'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  126 |\\cf5      expect( $(\\cf14 'body'\\cf5 )\\cf13 .\\cf5 css(\\cf14 'font-size'\\cf5 ) )\\cf13 .\\cf5 toEqual(\\cf14 '16px'\\cf5 )\\cf13 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8      |\\cf2···········································
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  127 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  128 |\\cf2 \\
    \\cf5     \\cf2  \\cf8  129 |\\cf2    test(\\cf7 'Body has default font family'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :126:42)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required CSS \\'9b Body has default font family
    \\f0\\b0 \\cf2 \\
    \\
        TypeError: Cannot read property 'replace' of undefined\\
    \\
    \\cf5     \\cf2  \\cf8  128 |\\cf2 \\
    \\cf5     \\cf2  \\cf8  129 |\\cf2    test(\\cf7 'Body has default font family'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  130 |\\cf5      \\cf12 let\\cf5  fontFamilySingleQuotes \\cf13 =\\cf5  ($(\\cf14 'body'\\cf5 )\\cf13 .\\cf5 css(\\cf14 'font-family'\\cf5 ))\\cf13 .\\cf5 replace(\\cf16 /\"/g\\cf13 ,\\cf5  \\cf14 '\\\\''\\cf5 )\\cf13 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8      |\\cf2···································
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  131 |\\cf2      expect(fontFamilySingleQuotes)\\cf9 .\\cf2 toMatch(\\cf15 /'Helvetica Neue', *'?Helvetica'?, *'?Arial'?, *sans-serif/\\cf2 )\\cf9 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8  132 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  133 |\\cf2 \\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :130:34)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required CSS \\'9b Paragraphs have specified line height
    \\f0\\b0 \\cf2 \\
    \\
        TypeError: Cannot read property 'attribs' of undefined\\
    \\
    \\cf5     \\cf2  \\cf8  134 |\\cf2    test(\\cf7 'Paragraphs have specified line height'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  135 |\\cf2      \\cf10 let\\cf2  p \\cf9 =\\cf2  $(\\cf7 'p'\\cf2 )\\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  136 |\\cf5      expect(p\\cf13 .\\cf5 css(\\cf14 'line-height'\\cf5 ) )\\cf13 .\\cf5 toEqual(\\cf14 '1.5'\\cf5 )\\cf13 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8      |\\cf2···············
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  137 |\\cf2      expect(p\\cf9 .\\cf2 attr(\\cf7 'id'\\cf2 ))\\cf9 .\\cf2 toBe(undefined)\\cf9 ;\\cf2  \\cf8 //shouldn't have id\\cf2 \\
    \\cf5     \\cf2  \\cf8  138 |\\cf2      expect(p\\cf9 .\\cf2 attr(\\cf7 'class'\\cf2 ))\\cf9 .\\cf2 toBe(undefined)\\cf9 ;\\cf2  \\cf8 //shouldn't have class\\cf2 \\
    \\cf5     \\cf2  \\cf8  139 |\\cf2    \\})\\
    \\
    \\cf5       at getCss (node_modules/cheerio/lib/api/css.js:69:25)\\cf2 \\
    \\cf5       at initialize.css (node_modules/cheerio/lib/api/css.js:25:12)\\cf2 \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :136:14)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required CSS \\'9b Images have constrained height
    \\f0\\b0 \\cf2 \\
    \\
        TypeError: Cannot read property 'attribs' of undefined\\
    \\
    \\cf5     \\cf2  \\cf8  140 |\\cf2 \\
    \\cf5     \\cf2  \\cf8  141 |\\cf2    test(\\cf7 'Images have constrained height'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  142 |\\cf5      expect($(\\cf14 'img'\\cf5 )\\cf13 .\\cf5 css(\\cf14 'max-height'\\cf5 ))\\cf13 .\\cf5 toEqual(\\cf14 '400px'\\cf5 )\\cf13 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8      |\\cf2······················
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  143 |\\cf2    \\})\\
    \\cf5     \\cf2  \\cf8  144 |\\cf2 \\
    \\cf5     \\cf2  \\cf8  145 |\\cf2    test(\\cf7 'Important list item is colored'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\
    \\cf5       at getCss (node_modules/cheerio/lib/api/css.js:69:25)\\cf2 \\
    \\cf5       at initialize.css (node_modules/cheerio/lib/api/css.js:25:12)\\cf2 \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :142:21)\\cf2 \\
    \\·
    \\f1\\b \\cf6   \\uc0\\u9679  Has required CSS \\'9b Important list item is colored
    \\f0\\b0 \\cf2 \\
    \\
        \\cf5 expect(\\cf6 received\\cf5 ).\\cf2 toBe\\cf5 (\\cf7 expected\\cf5 ) // Object.is equality\\cf2 \\
    \\
        Expected: \\cf7 1\\cf2 \\
        Received: \\cf6 0\\cf2 \\
    \\
    \\cf5     \\cf2  \\cf8  145 |\\cf2    test(\\cf7 'Important list item is colored'\\cf9 ,\\cf2  () \\cf9 =>\\cf2  \\{\\
    \\cf5     \\cf2  \\cf8  146 |\\cf2      \\cf10 let\\cf2  li \\cf9 =\\cf2  $(\\cf7 'li[class]'\\cf2 )\\
    \\cf5·····
    \\f1\\b \\cf6 >
    \\f0\\b0 \\cf11  147 |\\cf5      expect(li\\cf13 .\\cf5 length)\\cf13 .\\cf5 toBe(\\cf16 1\\cf5 )\\cf13 ;\\cf5  \\cf11 //only one item has class\\cf2 \\
    \\cf5     \\cf2  \\cf8      |\\cf2························
    \\f1\\b \\cf6 ^
    \\f0\\b0 \\cf2 \\
    \\cf5     \\cf2  \\cf8  148 |\\cf2      expect(li\\cf9 .\\cf2 css(\\cf7 'color'\\cf2 ))\\cf9 .\\cf2 toBeDefined()\\cf9 ;\\cf2  \\cf8 //that item has a color\\cf2 \\
    \\cf5     \\cf2  \\cf8  149 |\\cf2    \\})\\cf9 ;\\cf2 \\
    \\cf5     \\cf2  \\cf8  150 |\\cf2  \\})\\
    \\
    \\cf5       at Object.<anonymous> (\\cf10 problem-a/problem.spec.js\\cf5 :147:23)\\cf2 \\
    \\·
    \\f1\\b Test Suites: \\cf6 1 failed
    \\f0\\b0 \\cf2 , 1 total\\·
    \\f1\\b Tests:       \\cf6 17 failed
    \\f0\\b0 \\cf2 ,·
    \\f1\\b \\cf7 1 passed
    \\f0\\b0 \\cf2 , 18 total\\·
    \\f1\\b Snapshots:···
    \\f0\\b0 0 total\\·
    \\f1\\b Time:
    \\f0\\b0         1.605 s\\
    \\cf5 Ran all test suites matching \\cf2 /problem-a/i\\cf5 .\\cf2 \\
    calvinchan@Calvins-MacBook-Pro problem-set-01-Calvinchh % \\
    }"

      17 |     const path = __dirname + '/pretest.txt'
      18 |     const pretest = fs.readFileSync(path, 'utf-8');
    > 19 |     expect(pretest).toMatch(/FAIL +problem-a\/problem\.spec\.js/)
         |                     ^
      20 |   })
      21 | })
      22 |

      at Object.<anonymous> (problem-a/problem.spec.js:19:21)

  ● Source code is valid › CSS validates without errors

    error: Unexpected empty source (no-empty-source)
           At line 1, column 1.

      41 |
      42 |   test('CSS validates without errors', async () => {
    > 43 |     await expect('problem-a/css/*.css').toHaveNoCssLintErrorsAsync();
         |                                         ^
      44 |   })
      45 | });
      46 |

      at Object.<anonymous> (problem-a/problem.spec.js:43:41)

  ● Has required HTML › Specifies charset

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      53 |
      54 |   test('Specifies charset', () => {
    > 55 |     expect($('head > meta[charset]').length).toBe(1); //has 1 tag
         |                                              ^
      56 |   })
      57 |   
      58 |   test('Includes page title', () => {

      at Object.<anonymous> (problem-a/problem.spec.js:55:46)

  ● Has required HTML › Includes page title

    expect(received).toEqual(expected) // deep equality

    Expected: 1
    Received: 0

      58 |   test('Includes page title', () => {
      59 |     let title = $('head > title');
    > 60 |     expect(title.length).toEqual(1); //has 1 tag
         |                          ^
      61 |     expect(title.text().length).toBeGreaterThan(0); //has content
      62 |     expect(title.text()).not.toEqual("My Page Title");
      63 |   })

      at Object.<anonymous> (problem-a/problem.spec.js:60:26)

  ● Has required HTML › Includes author metadata

    expect(received).toEqual(expected) // deep equality

    Expected: 1
    Received: 0

      65 |   test('Includes author metadata', () => {
      66 |     let author = $('head > meta[name="author"]')
    > 67 |     expect(author.length).toEqual(1); //has 1 tag
         |                           ^
      68 |     expect(author.attr('content').length).toBeGreaterThan(0); //has content
      69 |     expect(author.attr('content')).not.toEqual("your name");
      70 |   })

      at Object.<anonymous> (problem-a/problem.spec.js:67:27)

  ● Has required HTML › Has a top-level heading

    expect(received).toEqual(expected) // deep equality

    Expected: 1
    Received: 0

      72 |   test('Has a top-level heading', () => {
      73 |     let h1 = $('h1');
    > 74 |     expect(h1.length).toEqual(1); //has 1 tag
         |                       ^
      75 |     expect(h1.text()).toBeTruthy(); //contains text
      76 |   })
      77 |

      at Object.<anonymous> (problem-a/problem.spec.js:74:23)

  ● Has required HTML › Has an image

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 1
    Received:    0

      78 |   test('Has an image', () => {
      79 |     let img = $('img');
    > 80 |     expect(img.length).toBeGreaterThanOrEqual(1); //has 1+ tags
         |                        ^
      81 |     expect(img.attr('src')).toMatch(/img\/.+/); //image in folder
      82 |   })
      83 |

      at Object.<anonymous> (problem-a/problem.spec.js:80:24)

  ● Has required HTML › Includes a paragraph

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 1
    Received:    0

      84 |   test('Includes a paragraph', () => {
      85 |     let p = $('p');
    > 86 |     expect(p.length).toBeGreaterThanOrEqual(1); //has 1+ tags
         |                      ^
      87 |     expect(p.text()).toBeTruthy(); //contains text
      88 |   })
      89 |

      at Object.<anonymous> (problem-a/problem.spec.js:86:22)

  ● Has required HTML › Includes a hyperlink in the paragraph

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 1
    Received:    0

      90 |   test('Includes a hyperlink in the paragraph', () => {
      91 |     let a = $('p a');
    > 92 |     expect(a.length).toBeGreaterThanOrEqual(1); //has 1+ tags
         |                      ^
      93 |     expect(a.attr('href')).toMatch(/https?:\/\/*/); //links to external page
      94 |   })
      95 |

      at Object.<anonymous> (problem-a/problem.spec.js:92:22)

  ● Has required HTML › Includes a list

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 1
    Received:    0

       95 |
       96 |   test('Includes a list', () => {
    >  97 |     expect( $('ul, ol').length ).toBeGreaterThanOrEqual(1); //has 1+ tag
          |                                  ^
       98 |   })
       99 |
      100 |   test('List has at least 3 items', () => {

      at Object.<anonymous> (problem-a/problem.spec.js:97:34)

  ● Has required HTML › List has at least 3 items

    expect(received).toBeGreaterThanOrEqual(expected)

    Expected: >= 3
    Received:    0

      100 |   test('List has at least 3 items', () => {
      101 |     let li = $('ul, ol').first().children('li');
    > 102 |     expect( li.length ).toBeGreaterThanOrEqual(3); //has 3 tags
          |                         ^
      103 |
      104 |     //no empty items!
      105 |     let empty = li.filter(function(i,elem) { return $(this).text().length == 0; })

      at Object.<anonymous> (problem-a/problem.spec.js:102:25)

  ● Has required CSS › Links in local stylesheet

    expect(received).toEqual(expected) // deep equality

    Expected: 1
    Received: 0

      119 |   test('Links in local stylesheet', () => {
      120 |     let link = $('head > link');
    > 121 |     expect( link.length ).toEqual(1);
          |                           ^
      122 |     expect( link.attr('href')).toMatch('css/style.css');
      123 |   })
      124 |

      at Object.<anonymous> (problem-a/problem.spec.js:121:27)

  ● Has required CSS › Body has default font size

    expect(received).toEqual(expected) // deep equality

    Expected: "16px"
    Received: undefined

      124 |
      125 |   test('Body has default font size', () => {
    > 126 |     expect( $('body').css('font-size') ).toEqual('16px');
          |                                          ^
      127 |   })
      128 |
      129 |   test('Body has default font family', () => {

      at Object.<anonymous> (problem-a/problem.spec.js:126:42)

  ● Has required CSS › Body has default font family

    TypeError: Cannot read property 'replace' of undefined

      128 |
      129 |   test('Body has default font family', () => {
    > 130 |     let fontFamilySingleQuotes = ($('body').css('font-family')).replace(/"/g, '\'');
          |                                  ^
      131 |     expect(fontFamilySingleQuotes).toMatch(/'Helvetica Neue', *'?Helvetica'?, *'?Arial'?, *sans-serif/);
      132 |   })
      133 |

      at Object.<anonymous> (problem-a/problem.spec.js:130:34)

  ● Has required CSS › Paragraphs have specified line height

    TypeError: Cannot read property 'attribs' of undefined

      134 |   test('Paragraphs have specified line height', () => {
      135 |     let p = $('p')
    > 136 |     expect(p.css('line-height') ).toEqual('1.5');
          |              ^
      137 |     expect(p.attr('id')).toBe(undefined); //shouldn't have id
      138 |     expect(p.attr('class')).toBe(undefined); //shouldn't have class
      139 |   })

      at getCss (node_modules/cheerio/lib/api/css.js:69:25)
      at initialize.css (node_modules/cheerio/lib/api/css.js:25:12)
      at Object.<anonymous> (problem-a/problem.spec.js:136:14)

  ● Has required CSS › Images have constrained height

    TypeError: Cannot read property 'attribs' of undefined

      140 |
      141 |   test('Images have constrained height', () => {
    > 142 |     expect($('img').css('max-height')).toEqual('400px');
          |                     ^
      143 |   })
      144 |
      145 |   test('Important list item is colored', () => {

      at getCss (node_modules/cheerio/lib/api/css.js:69:25)
      at initialize.css (node_modules/cheerio/lib/api/css.js:25:12)
      at Object.<anonymous> (problem-a/problem.spec.js:142:21)

  ● Has required CSS › Important list item is colored

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      145 |   test('Important list item is colored', () => {
      146 |     let li = $('li[class]')
    > 147 |     expect(li.length).toBe(1); //only one item has class
          |                       ^
      148 |     expect(li.css('color')).toBeDefined(); //that item has a color
      149 |   });
      150 | })

      at Object.<anonymous> (problem-a/problem.spec.js:147:23)

Test Suites: 1 failed, 1 total
Tests:       17 failed, 1 passed, 18 total
Snapshots:   0 total
Time:        1.658 s, estimated 2 s
Ran all test suites matching /problem-a/i.
calvinchan@Calvins-MacBook-Pro problem-set-01-Calvinchh % >....                    

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      145 |   test('Important list item is colored', () => {
      146 |     let li = $('li[class]')
    > 147 |     expect(li.length).toBe(1); //only one item has class
          |                       ^
      148 |     expect(li.css('color')).toBeDefined(); //that item has a color
      149 |   });
      150 | })

      at Object.<anonymous> (problem-a/problem.spec.js:147:23)

Test Suites: 1 failed, 1 total
Tests:       17 failed, 1 passed, 18 total
Snapshots:   0 total
Time:        1.658 s, estimated 2 s
Ran all test suites matching /problem-a/i.